#
# @configure_input@
#

#========================================================================
# IMPORTANT:
# Change the following variable to point in the directory hosting the file
# tkTheme.h, from the tile package sources!
#========================================================================
TILE_INCLUDES = -I/disk2b/local/sources/tcl/tile/generic/

#========================================================================
# The names of the source files is defined in the configure script.
# The object files are used for linking into the final library.
# This will be used when a dist target is added to the Makefile.
# It is not important to specify the directory, as long as it is the
# $(srcdir) or in the generic, win or unix subdirectory.
#========================================================================

GENERIC_OBJECTS	= \
    tileQt_Init.$(OBJEXT) \
    tileQt_QApp.$(OBJEXT) \
    tileQt_Utilities.$(OBJEXT) \
    tileQt_Background.$(OBJEXT) \
    tileQt_Button.$(OBJEXT) \
    tileQt_RadioButton.$(OBJEXT) \
    tileQt_CheckButton.$(OBJEXT) \
    tileQt_Menubutton.$(OBJEXT) \
    tileQt_ToolButton.$(OBJEXT) \
    tileQt_Scrollbar.$(OBJEXT) \
    tileQt_Entry.$(OBJEXT) \
    tileQt_Combobox.$(OBJEXT) \
    tileQt_Labelframe.$(OBJEXT) \
    tileQt_Notebook.$(OBJEXT) \
    tileQt_Progress.$(OBJEXT) \
    tileQt_TreeView.$(OBJEXT) \
    tileQt_Scale.$(OBJEXT) \
    tileQt_Arrows.$(OBJEXT)
    

WIN_OBJECTS	= 
MACOSX_OBJECTS	= 

PKG_OBJECTS	= $(GENERIC_OBJECTS) @PKG_OBJECTS@

#========================================================================
# PKG_TCL_SOURCES identifies Tcl runtime files that are associated with
# this package that need to be installed, if any.
#========================================================================

#PKG_TCL_SOURCES = @PKG_TCL_SOURCES@
PKG_TCL_SOURCES = \
  tileqt.tcl

#========================================================================
# This is a list of public header files to be installed, if any.
#========================================================================

PKG_HEADERS	= @PKG_HEADERS@

PKG_EXTRA_FILES = license.terms README.txt

PKG_MAN_PAGES	= Theme.3 style.n widget.n

#========================================================================
# "PKG_LIB_FILE" refers to the library (dynamic or static as per
# configuration options) composed of the named objects.
#========================================================================

PKG_LIB_FILE	= @PKG_LIB_FILE@
PKG_STUB_LIB_FILE = @PKG_STUB_LIB_FILE@

lib_BINARIES	= $(PKG_LIB_FILE)
BINARIES	= $(lib_BINARIES)

SHELL		= @SHELL@

srcdir		= @srcdir@
prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
libdir		= @libdir@
datadir		= @datadir@
mandir		= @mandir@
includedir	= @includedir@

DESTDIR		=

PKG_DIR		= $(PACKAGE_NAME)$(PACKAGE_VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PKG_DIR)

top_builddir	= .

INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
INSTALL_SCRIPT	= @INSTALL_SCRIPT@

PACKAGE_NAME	= @PACKAGE_NAME@
PACKAGE_VERSION	= @PACKAGE_VERSION@
CC		= @CC@
CFLAGS_DEFAULT	= @CFLAGS_DEFAULT@
CFLAGS_WARNING	= @CFLAGS_WARNING@
CLEANFILES	= @CLEANFILES@
EXEEXT		= @EXEEXT@
LDFLAGS_DEFAULT	= @LDFLAGS_DEFAULT@
MAKE_LIB	= @MAKE_LIB@
MAKE_SHARED_LIB	= @MAKE_SHARED_LIB@
MAKE_STATIC_LIB	= @MAKE_STATIC_LIB@
MAKE_STUB_LIB	= @MAKE_STUB_LIB@
OBJEXT		= @OBJEXT@
RANLIB		= @RANLIB@
RANLIB_STUB	= @RANLIB_STUB@
SHLIB_CFLAGS	= @SHLIB_CFLAGS@
SHLIB_LD	= @SHLIB_LD@
SHLIB_LD_FLAGS	= @SHLIB_LD_FLAGS@
SHLIB_LD_LIBS	= @SHLIB_LD_LIBS@
STLIB_LD	= @STLIB_LD@
TCL_DEFS	= @TCL_DEFS@
TCL_SRC_DIR	= @TCL_SRC_DIR@
TCL_BIN_DIR	= @TCL_BIN_DIR@
TK_SRC_DIR	= @TK_SRC_DIR@
TK_BIN_DIR	= @TK_BIN_DIR@

# Not used by sample, but retained for reference of what Tcl required
TCL_LIBS	= @TCL_LIBS@
TK_LIBS		= @TK_LIBS@

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR):$(TK_BIN_DIR)
TCLSH_ENV	= TCL_LIBRARY="`@CYGPATH@ $(TCL_SRC_DIR)/library`" \
		  TK_LIBRARY="`@CYGPATH@ $(TK_SRC_DIR)/library`" \
		  TILEQT_LIBRARY="`@CYGPATH@ $(srcdir)/library`" \
		  @LD_LIBRARY_PATH_VAR@="$(EXTRA_PATH):$(@LD_LIBRARY_PATH_VAR@)" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(top_builddir)"
TCLSH_PROG	= @TCLSH_PROG@
WISH_PROG	= @WISH_PROG@
TCLSH		= $(TCLSH_ENV) $(TCLSH_PROG)
WISH		= $(TCLSH_ENV) $(WISH_PROG)

# The local includes must come first, because the TK_XINCLUDES can be
# just a comment
INCLUDES	= @PKG_INCLUDES@ \
		  @TCL_INCLUDES@ @TK_INCLUDES@ @TK_XINCLUDES@ \
                  @QT_INCLUDES@ $(TILE_INCLUDES)

EXTRA_CFLAGS	= @PKG_CFLAGS@

DEFS		= @DEFS@ $(EXTRA_CFLAGS)

CONFIG_CLEAN_FILES = Makefile

CPPFLAGS	= @CPPFLAGS@
## The following are needed by KDE/QT configuration
LIBSOCKET       = @LIBSOCKET@
LIBZ            = @LIBZ@
LIBPNG          = @LIBPNG@
LIB_X11         = @LIB_X11@
LIBSM           = @LIBSM@
###################################################
TILE_VERSION    = $(shell echo \
   "puts [lindex [lsort [package versions tile]] end]" | $(TCLSH_PROG))
TILE_LIB_DIR    = $(shell echo \
   "set ::tile_version [lindex [lsort [package versions tile]] end];\
    set ::tile_lib [lindex [package ifneeded tile [set ::tile_version]] 1];\
    puts [file dirname [set ::tile_lib]]" | $(TCLSH_PROG))
TILE_LIBS       = -L$(TILE_LIB_DIR) -ltile$(TILE_VERSION)
LIBS		= @PKG_LIBS@ @LIBS@ @QT_LDFLAGS@ @LIB_QT@ \
                  @KDE_LDFLAGS@ @all_libraries@ \
                  @LIB_KDECORE@ @LIB_KDEUI@ $(TILE_LIBS)
AR		= ar
CFLAGS		= @CFLAGS@
CC = g++
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
COMPILECPP	= $(CC) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

VPATH = $(srcdir):$(srcdir)/generic:$(srcdir)/unix:$(srcdir)/win:$(srcdir)/macosx

all: binaries libraries doc

binaries: $(BINARIES) pkgIndex.tcl

libraries:

doc:

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries
	@mkdir -p $(DESTDIR)$(pkglibdir)
	$(INSTALL_DATA) pkgIndex.tcl $(DESTDIR)$(pkglibdir)
	@list='$(PKG_EXTRA_FILES)'; for p in $$list; do \
	  if test -f $(srcdir)/$$p; then \
	    destp=`basename $$p`; \
	    echo " Install $$destp $(DESTDIR)$(pkglibdir)/$$destp"; \
	    $(INSTALL_DATA) $(srcdir)/$$p $(DESTDIR)$(pkglibdir)/$$destp; \
	  fi; \
	done

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries

install-doc: doc

install-html: html
	@mkdir -p $(DESTDIR)$(pkglibdir)/html
	@list='$(PKG_MAN_PAGES)'; for p in $$list; do \
		html=`basename $$p|sed -e 's/.[^.]*$$//'`.html; \
	  	$(INSTALL_DATA) $(srcdir)/doc/$$html $(DESTDIR)$(pkglibdir)/html/; \
	done

html:
	@cd $(srcdir)/doc; \
	list='$(PKG_MAN_PAGES)'; for p in $$list; do \
		html=`basename $$p|sed -e 's/.[^.]*$$//'`.html; \
		echo "Creating \"$$html\" from \"$$p\""; \
		rm -f $$html; \
		nroff -man $$p | rman -f HTML > $$html; \
	done

# Piping to cat is necessary on Windows to see the output, and
# harmless on Unix
test: binaries libraries
	$(WISH) `@CYGPATH@ $(srcdir)/tests/all.tcl` $(TESTFLAGS) | cat

demo: binaries libraries
	$(WISH) `@CYGPATH@ $(srcdir)/demos/demo.tcl`

shell: binaries libraries
	@$(WISH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(WISH_PROG) $(SCRIPT)

depend:

#========================================================================
# $(PKG_LIB_FILE) should be listed as part of the BINARIES variable
# mentioned above.  That will ensure that this target is built when you
# run "make binaries".
#
# The $(PKG_OBJECTS) objects are created and linked into the final
# library.  In most cases these object files will correspond to the
# source files above.
#========================================================================

$(PKG_LIB_FILE): $(PKG_OBJECTS)
	-rm -f $(PKG_LIB_FILE)
	${MAKE_LIB}
	$(RANLIB) $(PKG_LIB_FILE)

.SUFFIXES: .c .cpp .$(OBJEXT)

.c.@OBJEXT@:
	$(COMPILE) -c `@CYGPATH@ $<` -o $@

.cpp.@OBJEXT@:
	$(COMPILECPP) -c `@CYGPATH@ $<` -o $@

pkgIndex.tcl:
	(\
	echo 'if {[catch {package require Tcl 8.4}]} return';\
	echo 'package ifneeded $(PACKAGE_NAME) $(PACKAGE_VERSION) \
	    [list load [file join $$dir $(PKG_LIB_FILE)] $(PACKAGE_NAME)]'\
	) > pkgIndex.tcl

install-lib-binaries:
	@mkdir -p $(DESTDIR)$(pkglibdir)
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p; \
	    echo " $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p; \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib; \
		fi; \
	    fi; \
	  fi; \
	done
	@list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  if test -f $(srcdir)/library/$$p; then \
	    destp=`basename $$p`; \
	    echo " Install $$destp $(DESTDIR)$(pkglibdir)/$$destp"; \
	    $(INSTALL_DATA) $(srcdir)/library/$$p $(DESTDIR)$(pkglibdir)/$$destp; \
	  fi; \
	done

install-bin-binaries:
	@mkdir -p $(DESTDIR)$(bindir)
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  fi; \
	done

uninstall-binaries:
	list='$(lib_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  p=`basename $$p`; \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(bin_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/$$p; \
	done

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.$(OBJEXT) core *.core
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log config.status

.PHONY: all binaries clean depend distclean doc install libraries test

# *EOF*
