#
# @configure_input@
#

#========================================================================
# IMPORTANT:
# Change the following variable to point in the directory hosting the file
# tkTheme.h, from the tile package sources!
#========================================================================
TILE_INCLUDES = -I/disk2b/local/sources/tcl/tile/generic/

#========================================================================

PKG_OBJECTS	= \
    tileQt_Init.$(OBJEXT) \
    tileQt_QApp.$(OBJEXT) \
    tileQt_Utilities.$(OBJEXT) \
    tileQt_Background.$(OBJEXT) \
    tileQt_Button.$(OBJEXT) \
    tileQt_RadioButton.$(OBJEXT) \
    tileQt_CheckButton.$(OBJEXT) \
    tileQt_Menubutton.$(OBJEXT) \
    tileQt_ToolButton.$(OBJEXT) \
    tileQt_Scrollbar.$(OBJEXT) \
    tileQt_Entry.$(OBJEXT) \
    tileQt_Combobox.$(OBJEXT) \
    tileQt_Labelframe.$(OBJEXT) \
    tileQt_Notebook.$(OBJEXT) \
    tileQt_Progress.$(OBJEXT) \
    tileQt_TreeView.$(OBJEXT) \
    tileQt_Scale.$(OBJEXT) \
    tileQt_Arrows.$(OBJEXT)
    
#========================================================================
# PKG_TCL_SOURCES identifies Tcl runtime files that are associated with
# this package that need to be installed, if any.
#========================================================================

PKG_TCL_SOURCES = tileqt.tcl
PKG_EXTRA_FILES = license.terms
PKG_MAN_PAGES	=

#========================================================================
# "PKG_LIB_FILE" refers to the library (dynamic or static as per
# configuration options) composed of the named objects.
#========================================================================

PKG_LIB_FILE	= @PKG_LIB_FILE@

lib_BINARIES	= $(PKG_LIB_FILE)
BINARIES	= $(lib_BINARIES)

SHELL		= @SHELL@

srcdir		= @srcdir@
prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
libdir		= @libdir@
datadir		= @datadir@
mandir		= @mandir@
includedir	= @includedir@

DESTDIR		=

PKG_DIR		= $(PACKAGE_NAME)$(PACKAGE_VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PKG_DIR)

top_builddir	= .

INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
INSTALL_SCRIPT	= @INSTALL_SCRIPT@

PACKAGE_NAME	= @PACKAGE_NAME@
PACKAGE_VERSION	= @PACKAGE_VERSION@
CC		= @CC@
CFLAGS_DEFAULT	= @CFLAGS_DEFAULT@
CFLAGS_WARNING	= @CFLAGS_WARNING@
CLEANFILES	= @CLEANFILES@
EXEEXT		= @EXEEXT@
LDFLAGS_DEFAULT	= @LDFLAGS_DEFAULT@
MAKE_LIB	= @MAKE_LIB@
MAKE_SHARED_LIB	= @MAKE_SHARED_LIB@
MAKE_STATIC_LIB	= @MAKE_STATIC_LIB@
MAKE_STUB_LIB	= @MAKE_STUB_LIB@
OBJEXT		= @OBJEXT@
RANLIB		= @RANLIB@
RANLIB_STUB	= @RANLIB_STUB@
SHLIB_CFLAGS	= @SHLIB_CFLAGS@
SHLIB_LD	= @SHLIB_LD@
SHLIB_LD_FLAGS	= @SHLIB_LD_FLAGS@
SHLIB_LD_LIBS	= @SHLIB_LD_LIBS@
STLIB_LD	= @STLIB_LD@
TCL_DEFS	= @TCL_DEFS@
TCL_SRC_DIR	= @TCL_SRC_DIR@
TCL_BIN_DIR	= @TCL_BIN_DIR@
TK_SRC_DIR	= @TK_SRC_DIR@
TK_BIN_DIR	= @TK_BIN_DIR@

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR):$(TK_BIN_DIR)
TCLSH_ENV	= TCL_LIBRARY="`@CYGPATH@ $(TCL_SRC_DIR)/library`" \
		  TK_LIBRARY="`@CYGPATH@ $(TK_SRC_DIR)/library`" \
		  TILEQT_LIBRARY="`@CYGPATH@ $(srcdir)/library`" \
		  @LD_LIBRARY_PATH_VAR@="$(EXTRA_PATH):$(@LD_LIBRARY_PATH_VAR@)" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(top_builddir)"
TCLSH_PROG	= @TCLSH_PROG@
WISH_PROG	= @WISH_PROG@
TCLSH		= $(TCLSH_ENV) $(TCLSH_PROG)
WISH		= $(TCLSH_ENV) $(WISH_PROG)

# The local includes must come first, because the TK_XINCLUDES can be
# just a comment
INCLUDES	= @PKG_INCLUDES@ \
		  @TCL_INCLUDES@ @TK_INCLUDES@ @TK_XINCLUDES@ \
                  @QT_INCLUDES@ $(TILE_INCLUDES)

EXTRA_CFLAGS	= @PKG_CFLAGS@

DEFS		= @DEFS@ $(EXTRA_CFLAGS)

CONFIG_CLEAN_FILES = Makefile pkgIndex.tcl

CPPFLAGS	= @CPPFLAGS@
## The following are needed by KDE/QT configuration
LIBSOCKET       = @LIBSOCKET@
LIBZ            = @LIBZ@
LIBPNG          = @LIBPNG@
LIB_X11         = @LIB_X11@
LIBSM           = @LIBSM@
###################################################
TILE_VERSION    = $(shell echo \
   "puts [lindex [lsort [package versions tile]] end]" | $(TCLSH_PROG))
TILE_LIB_DIR    = $(shell echo \
   "set ::tile_version [lindex [lsort [package versions tile]] end];\
    set ::tile_lib [lindex [package ifneeded tile [set ::tile_version]] 1];\
    puts [file dirname [set ::tile_lib]]" | $(TCLSH_PROG))
TILE_LIBS       = -L$(TILE_LIB_DIR) -ltile$(TILE_VERSION)
LIBS		= @PKG_LIBS@ @LIBS@ @QT_LDFLAGS@ @LIB_QT@ $(TILE_LIBS)
AR		= ar
CFLAGS		= @CFLAGS@
CC = g++
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) -Wno-non-virtual-dtor
COMPILECPP	= $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) -Wno-non-virtual-dtor

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.
#========================================================================

VPATH = @srcdir@:@srcdir@/generic

all: binaries libraries doc

binaries: $(BINARIES)

libraries:

doc:

install: $(PKG_LIB_FILE)
	@mkdir -p $(DESTDIR)$(pkglibdir)
	$(INSTALL) pkgIndex.tcl $(DESTDIR)$(pkglibdir)/pkgIndex.tcl
	$(INSTALL) $(PKG_LIB_FILE) $(DESTDIR)$(pkglibdir)/$(PKG_LIB_FILE)
	@list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  if test -f $(srcdir)/library/$$p; then \
	    destp=`basename $$p`; \
	    echo " Install $$destp $(DESTDIR)$(pkglibdir)/$$destp"; \
	    $(INSTALL_DATA) $(srcdir)/library/$$p $(DESTDIR)$(pkglibdir)/$$destp; \
	  fi; \
	done


# Piping to cat is necessary on Windows to see the output, and
# harmless on Unix
test: binaries libraries
	$(WISH) `@CYGPATH@ $(srcdir)/tests/all.tcl` $(TESTFLAGS) | cat

demo: binaries libraries
	$(WISH) `@CYGPATH@ $(srcdir)/demos/demo.tcl`

shell: binaries libraries
	@$(WISH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(WISH_PROG) $(SCRIPT)

depend:

#========================================================================
# $(PKG_LIB_FILE) should be listed as part of the BINARIES variable
# mentioned above.  That will ensure that this target is built when you
# run "make binaries".
#
# The $(PKG_OBJECTS) objects are created and linked into the final
# library.  In most cases these object files will correspond to the
# source files above.
#========================================================================

$(PKG_LIB_FILE): $(PKG_OBJECTS)
	-rm -f $(PKG_LIB_FILE)
	${MAKE_LIB}
	$(RANLIB) $(PKG_LIB_FILE)

.SUFFIXES: .c .cpp .$(OBJEXT)

.c.@OBJEXT@:
	$(COMPILE) -c $< -o $@

.cpp.@OBJEXT@:
	$(COMPILECPP) -c $< -o $@

Makefile: $(srcdir)/Makefile.in config.status
	sh config.status

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.$(OBJEXT) core *.core
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -rf config.cache config.log config.status autom4*.cache

.PHONY: all binaries clean depend distclean doc install libraries test

# *EOF*
